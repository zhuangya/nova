// Generated by CoffeeScript 1.6.3
var config, db, fibrous, schema, timestamps, utils;

db = require('mongoose');

timestamps = require('mongoose-timestamp');

utils = require('../utils');

config = require('../../config');

fibrous = require('fibrous');

schema = db.Schema({
  name: {
    type: String,
    required: true,
    unique: true
  },
  email: {
    type: String,
    required: true,
    unique: true
  },
  password: {
    type: String,
    required: false
  },
  flags: {
    type: [String],
    index: true,
    spare: true
  },
  alias: {
    type: [String],
    index: true
  },
  points: Number,
  descr: String,
  _icon_url: String,
  counter: {
    projects: {
      type: Number,
      "default": 0
    },
    ideas: {
      type: Number,
      "default": 0
    },
    comments: {
      type: Number,
      "default": 0
    },
    likes: {
      type: Number,
      "default": 0
    }
  }
});

schema.plugin(timestamps);

schema.statics.findByAlias = function(id, cb) {
  return this.findOne({
    'alias': id
  }, cb);
};

schema.statics.findByEmail = function(email, cb) {
  return this.findOne({
    'email': email
  }, cb);
};

schema.statics.findByName = function(name, cb) {
  return this.findOne({
    'name': name
  }, cb);
};

schema.statics.hashPasswd = utils.genHash;

schema.statics.updateCounter = fibrous(function(id, name, val) {
  var op;
  if (val == null) {
    val = 1;
  }
  console.info("update counter " + name);
  op = {
    $inc: {}
  };
  op.$inc[name] = val;
  return this.sync.findByIdAndUpdate(id, op);
});

schema.virtual('icon_url').get(function() {
  return this._icon_url || gravatar.url(this.email, {
    d: "http://" + config.hostname + "/images/avatar11.png"
  });
});

schema.virtual('is_admin').get(function() {
  return this.flags.indexOf('admin' >= 0);
});

schema.virtual('icon_url_large').get(function() {
  return this._icon_url && this._icon_url + "?schema=profileIcon100" || gravatar.url(this.email, {
    d: "http://" + config.hostname + "/images/avatar11.png",
    s: 100
  });
});

schema.methods.genToken = utils.genToken(function() {
  return this.id;
});

schema.methods.verifyToken = utils.verifyToken(function(id) {
  if (id !== this.id) {
    throw new Error('id mismatch');
  }
  return id;
});

schema.statics._verifyToken = utils.verifyToken(function(id) {
  return id;
});

schema.statics.verifyToken = fibrous(function(token) {
  var e;
  try {
    return this.sync.findById(this._verifyToken(token));
  } catch (_error) {
    e = _error;
    console.info(e);
    return null;
  }
});

schema.methods.sendVerifyEmail = function(url) {
  var email, token;
  token = this.genToken(3600 * 24);
  email = (new Buffer(this.email)).toString('base64');
  url = url && ("?url=" + (encodeURIComponent(url))) || "";
  return mailer.sendMail('email_verify', {
    user: this,
    link: "http://" + config.hostname + "/auth/verify_email/" + email + "/" + token + url
  });
};

schema.methods.sendRstPwdEmail = function() {
  var email, token;
  token = this.genToken(3600 * 24);
  email = (new Buffer(this.email)).toString('base64');
  return mailer.sendMail('reset_password', {
    user: this,
    link: "http://" + config.hostname + "/auth/reset_password/" + email + "/" + token
  });
};

schema.methods.getLikedIdeas = fibrous(function(options) {
  return fibrous.wait(db.model('ActionLog').sync.find({
    user: this._id,
    action: 'fav.create'
  }, {
    object: 1
  }, options).map(function(l) {
    return db.model('Idea').future.findById(l.object.id);
  }));
});

schema.methods.getOwnIdeas = fibrous(function(options) {
  return db.model('Idea').sync.find({
    ownner: this._id,
    "class": 'article'
  }, null, options);
});

schema.methods.isFirstView = fibrous(function(project) {
  var log;
  log = db.model('ActionLog').sync.findOne({
    user: this._id,
    action: 'project.view',
    'object.id': project._id
  });
  if (log) {
    return false;
  }
  db.model('ActionLog').sync.write({
    user: this._id,
    action: 'project.view',
    object: {
      id: project._id
    }
  });
  return true;
});

schema.methods.updateCounter = fibrous(function(name, val) {
  var op;
  if (val == null) {
    val = 1;
  }
  op = {
    $inc: {}
  };
  op.$inc[name] = val;
  return this.sync.update(op);
});

schema.methods.toJSON = function() {
  return {
    id: this._id,
    name: this.name,
    icon_url: this.icon_url,
    icon_url_large: this.icon_url_large,
    alias: this.alias,
    points: this.points,
    descr: this.descr,
    counter: this.counter,
    flags: this.flags
  };
};

module.exports = db.model('User', schema);
