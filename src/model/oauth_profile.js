// Generated by CoffeeScript 1.6.3
var config, db, schema, timestamps;

db = require('mongoose');

timestamps = require('mongoose-timestamp');

config = require('../../config');

schema = db.Schema({
  id: {
    type: String,
    required: true,
    unique: true
  },
  provider: {
    type: String
  },
  token: {
    type: db.Schema.Types.Mixed,
    required: true
  },
  _json: {
    type: db.Schema.Types.Mixed
  },
  _user: {
    type: db.Schema.Types.ObjectId,
    index: true,
    ref: 'User'
  }
});

schema.plugin(timestamps);

schema.statics.createOrUpdate = function(profile, cb) {
  var condition,
    _this = this;
  condition = {
    id: "" + profile.provider + "/" + profile.id
  };
  return this.findOne(condition, function(err, obj) {
    if (err) {
      return cb(err, null);
    }
    obj = obj || new _this(condition);
    obj.provider = profile.provider;
    obj.token = profile.token;
    obj._json = profile._json;
    return obj.save(cb);
  });
};

schema.virtual('name').get(function() {
  switch (this.provider) {
    case "twitter":
      return this._json.name;
    case "google":
      return this._json.name;
    case "facebook":
      return this._json.name;
    default:
      return "";
  }
});

schema.virtual('email').get(function() {
  switch (this.provider) {
    case "google":
      return this._json.email;
    case "facebook":
      return this._json.email;
    default:
      return "";
  }
});

schema.virtual('profile_image').get(function() {
  switch (this.provider) {
    case "twitter":
      return this._json.profile_background_image_url;
    case "google":
      return this._json.picture;
    default:
      return "";
  }
});

module.exports = db.model('OAuthProfile', schema);
